
//Test 302

// Input:
//21
//77
//100

program test302




namespace Globals{
	const bool b = true;
	int niz[],niz2[],niz3[];
	int a2222,b222;
	const int z = 12;
	const int k = 13;
	
	{

	bool eol() {
		print('v');
		return false;
	}

	}
}


const int non_namespaced_global = 14;

{

	void test1() {
		chr(72);
		print(7);
		ord(''');
		print(true);

		print('6');
		print(63);
		print(10000);
		print(100000);  // 6-digits

		chr(72);
		print(chr(72));
		print(ord('''));

		print(7, 3);
		print(true, 2);
		print('X', 4);

		print(ord('"'));
		print(ord('''));
		print(ord('\n'));
		print(ord('\b'));
		print(ord('\t'));
		print(ord('\r'));
		print(ord('\'));
		print(ord('z'));

		print(eol);

	}

	void test2()
		int x;
		bool barr[];
	{
		print(eol);
		read(x);
		print(x);

	}

	void test3()
		int x;
		bool barr[];
	{
		print(eol);

		print(Globals::b);
		print(Globals::z);
		print(Globals::k);
		print(non_namespaced_global);

		print(Globals::eol());

		print(eol);
	}

	void test4()
		int x;
		bool some_bool;
	{
		print(eol);
		//undeclared_arr[3] = 2;

		some_bool = true;
		print(some_bool);

		x = 7;
		print(x);

		x++;
		print(x);

		read(x);
		print(x);

		some_bool = Globals::eol();
		print(some_bool);
		Globals::eol();
		//print(Globals::eol);  // PARSES AND IT SHOULD NOT

		print(eol);
	}


	void test5()
		int x[];
		char c[];
	{
		print(eol);

		x = new int[10];
		x[2] = 144;
		print(x[2]);

		c = new char[2];
		c[0] = '1';
		c[1] = '2';
		print(c[0]);
		print(c[1]);

		c = new char[4];
		print(c[0]);
		c[0] = '3';
		print(c[0]);

		//c = new bool[7];

		print(eol);
	}


	void test6()
		int x[];
		char c[];
		int z;
	{
		print(eol);

		x = new int[10];

		print(len(x));

		x[2] = 1 + 20 / 4 / 5 * 3;  // == 4
		print(x[2]);

		x[0] = -(1 + 20 / 4 / 5 * 3);  // == -4
		print(x[0]);

		x[0] = -(1 + 20) / (4 * 5 + 1) * 3;  // == -3
		print(x[0]);

		print(1 + 20 / 4 / 5 * 3 + 1);  // == 5

		print(1 + 100 / (8 / 2) + 1);  // == 27

		print(-1 + 100 / 4 / (3 + 2) + 1);  // == 5

		z = 1 + 100 / 4 / (3 + 2) + 1;  // == 7
		print(z);

		print(eol);
	}

	void test7()
		bool a, b;
		int c, d;
	{

		a = true;
		b = false;
		read(c);
		if (c == 100) {
			print('1');
		} else {
			print(c);
		}

		print('F');

		d = 10;

		if (c > 10 && 13 < 15 && (14 + 1) > 10) {
			print('2');
		} else {
			print('N');
		}

		if (d % 10 != 0) {
			print('N');
		} else {
			if (c % d == 0) {
				if (c == 100) {
					print('3');
				}
				print('4');
			}
		}

	}

	void test8()
		int i, n;
		int j, m;
		bool tmp;
	{
		print(eol);

		if (true) {
			print('t');
		}

		i = 12;
		if (i != 0) {
			print('r');
		}

		tmp = true;
		if (tmp) {
			print('u');
		}

		for (i = 0, n = 4; i < n; i++) {
			// works if Condition is set instead of CondTerm in lexic rules:
			// for (j = 0, m = 3; j < m && i > 1; j++) {
			for (j = 0, m = 3; j < m; j++) {
				if (j == 1 || j == 2) {
					print(i);
					print(j);
				}
			}
		}
		print(eol);

		for (i = 0, n = 4; i < n; i++) {
			if (i == 0) continue;
			for (j = 0, m = 3; ; j++) {
				if (j == 1 || j == 2) {
					print(i);
					print(j);
				}
				if (j >= m - 1) break;
			}
		}
		print(eol);

		for (i = 0, n = 4; i < n; i++) {
			if (i == 0) continue;
			for (j = 0, m = 3; ; j++) {
				if (j == 1 || j == 2) {
					print(i);
					print(j);
					break;
				}
				if (j >= m - 1) break;
			}
			break;
		}

		print(eol);
	}


	void test9()
		int x[], y[];
		int z, k;
		int i, n;
	{
		print(eol);

		x = new int[5 + 5];
		// x = new int[5 - 2]; // TRAP not enough space unpacking later

		for (i = 0, n = len(x); i < n; i++) {
			x[i] = i + 1;
			print(x[i]);
		}

		print(eol);
		print(':');  // smiley
		print(')');
		print(' ');

		y = new int[5];
		[, z, k, *y] = x;

		print(z);
		print(k);
		print(eol);

		for (i = 0, n = len(y); i < n; i++) {
			print(y[i]);
		}

		print(eol);
	}


	// Override the original eol symbol
	int eol(int ret_val, bool should_log)
		char eol;
	{
		eol = '\n';
		print(eol);
		if (should_log) print(should_log);
		return ret_val;
	}

	void testLast(int ret_val) {
		print(eol(ret_val, true));
		print(eol(ret_val, false));
	}


	void main()
		int err;
	{
		test1();

		test2();

		test3();

		test4();

		test5();

		test6();

		test7();

		test8();

		test9();

		err = 0;
		testLast(err);
	}

}




